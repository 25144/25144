public class Test {
    public static void main(String[] args) {
        Node head = new Node(0);
        Node node1 = new Node(1);
        Node node2 = new Node(2);
        Node node3 = new Node(3);
        Node node4 = new Node(4);
        Node node5 = new Node(1);
        head.next = node1;
        node1.next = node2;
        node2.next = node3;
        node3.next = node4;
        node4.next = node5;

       // print(head);

      //  Node pre = reversal(head);

       // print(pre);


        //System.out.println(isPailndrome(head));
        System.out.println(isPailndrome1(head));

    }

    //反转
    public static Node reversal(Node head) {
        if (head == null) {
            return head;
        }
        Node pre = head;
        Node cur = head.next;
        Node tmp;
        while (null != cur) {
            tmp = cur.next;
            cur.next = pre;
            pre = cur;
            cur = tmp;
        }
        head.next = null;
        return pre;
    }

    //打印
    public static void print(Node head) {
        while (null != head) {
            System.out.println(head.Date);
            head = head.next;
        }
    }

    //快慢指针判断回文字
    public static boolean isPailndrome(Node head) {
        if(head.next==null||head==null){
            return true;
        }
        Node F = head.next;
        Node S = head.next;
        //S在中间位置
        while(S.next!=null&&F.next!=null){
            S = S.next;
            F = F.next.next;
        }
        F = S.next;  //F在中间右边一个位置
        S.next = null;
        Node n3 = null; // new Node
        //从右边指向左边
        while(F!=null){
            n3 = F.next;
            F.next = S;
            S = F;
            F = n3;
        }
        n3 = S;
        F = head.next;
        boolean flag = true;
        while (S!=null&&F!=null){
            if(S.Date!=F.Date){
                flag = false;
                return flag;
            }
            S=S.next;
            F=F.next;
        }
        S = n3.next;
        n3.next = null;
        while (S!=null){
            F = S.next;
            S.next=n3;
            n3 = S;
            S = F;
        }
        return flag;
    }
    //利用队列来判断是不是回文字符

    
    //
    public static boolean isPailndrome1(Node head){
        if(null==head){
            return false;
        }
        Stack<Node> stack = new Stack<Node>();
        Node cur = head.next;
        while (null!=cur){
            stack.push(cur);
            cur = cur.next;
        }
        head=head.next;
        while (null!=head){

            if(head.Date!=stack.pop().Date){
                return false;
            }
            head=head.next;
        }
        return true;
    }
}

public class Node{
     int Date;
     Node next;

    public Node(int date) {
        Date = date;
    }

}



