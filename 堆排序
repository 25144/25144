
    public static void heapSort(int arr[]){
        if(arr == null || arr.length<2){
            return;
        }
        for (int i = 0; i < arr.length; i++) { //O(N)
            heapInsert(arr,i);                 //O(logN)
        }
        /*for (int i = arr.length-1; i >=0 ; i--) {
            heapify(arr,i,arr.length);          //O(N)
        }*/


        int heapSize =arr.length;
        swap(arr,0,--heapSize);
        while (heapSize>0){
            heapify(arr,0,heapSize);
            swap(arr,0,--heapSize);
        }

    }
    //插入一个堆
    public static void heapInsert(int[]arr,int index){
        while(arr[index]>arr[(index-1)>>1]){
            swap(arr,index,(index-1)>>1);
            index = (index-1)>>1;
        }
    }
    
    向下排序
    public static void heapify(int []arr , int index , int heapsize){
        int left = index*2+1 ;
        while(left<heapsize){
            int largest = left+1<heapsize&&arr[left]>arr[left+1]?left:left+1;
            largest = arr[largest]>arr[index]?largest:index;
            if(largest==index){
                break;
            }
            swap(arr,largest,index);
            index = largest;
            left =index*2+1;
        }
    }
    交换
    public static void swap(int []arr,int a,int b ){
        arr[a] = arr[a] ^arr[b] ;
        arr[b] = arr[a] ^arr[b] ;
        arr[a] = arr[a] ^arr[b] ;
    }
